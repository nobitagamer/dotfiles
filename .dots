#!/bin/bash
# Don't use interactive mode as a hash-bang!, see https://stackoverflow.com/questions/6431741/how-to-stop-a-zsh-script-from-being-suspended-tty-output

# Colors as per: http://www.tldp.org/LDP/abs/html/colorizing.html

echoerrcolor() {
	if (($colors)); then
		case $1 in
		none)
			str=$'\e[0;37m'
			;;
		green)
			str=$'\e[0;32m'
			;;
		red)
			str=$'\e[0;31m'
			;;
		blue)
			str=$'\e[1;34m'
			;;
		darkcyan)
			str=$'\e[0;36m'
			;;
		darkgreen)
			str=$'\e[1;32m'
			;;
		darkred)
			str=$'\e[1;31m'
			;;
		magenta)
			str=$'\e[0;35m'
			;;
		darkmagenta)
			str=$'\e[1;35m'
			;;

		esac
		echo -ne "$str" >&2
	fi
}

echoerrnocolor() {
	if (($colors)); then
		echo -ne $'\e[0m' >&2
	fi
}

echoerr() {
	if [ $# -gt 1 ]; then
		color=$1
		shift
		echoerrcolor $color
	fi
	echo "$@" >&2
	if [ -z "$color" ]; then
		echoerrnocolor
	fi
}

printferr() { printf "$@" >&2; }


author='nobitagamer'

appendshell() {
	case "$1" in
	start)
		add='echo "Setting up Dotbot. Please do not ^C." >&2;'
		;;
	centosfixeol)
		add="sudo sed -i -e '/^mirrorlist/d;/^#baseurl=/{s,^#,,;s,/mirror,/vault,;}' /etc/yum.repos.d/CentOS*.repo;"
		;;
  # Install require pacakages for WSL CentOS/Rocky Linux 9 from Docker
	centoswsl)
		add="sudo yum --nogpgcheck -y install procps glibc-langpack-en git which gettext;"
		;;
	streamwsl)
    # !BUG: WSL1: fix `RPM: error: db5 error(-30969) from dbenv->open: BDB0091 DB_VERSION_MISMATCH: Database environment version mismatch`, see https://github.com/WhitewaterFoundry/Fedora-Remix-for-WSL/issues/47#issuecomment-531762785
    # !BUG: WSL1: error on importing (any) GPG key, see https://github.com/mishamosher/CentOS-WSL/issues/14
    add="sudo sed -i '/gpgcheck/ s/^#*/#/' /etc/dnf/dnf.conf; \
    sudo yum --nogpgcheck -y upgrade --refresh rpm glibc; \
    sudo rm /var/lib/rpm/.rpm.lock; \
    sudo yum --nogpgcheck -y upgrade dnf;"
		;;
  #  # Require by ruby-build for openssl-1.1 on CentOS Stream/Rocky Linux 9
	stream9wsl)
		add="sudo yum --nogpgcheck -y install perl-FindBin perl-File-Compare;"
		;;
	enablepasswordless)
		# shellcheck disable=SC2016
		add='sudo bash -c "echo \"$USER ALL=(ALL) NOPASSWD: ALL\" > /etc/sudoers.d/$USER";'
		;;
	mkprefix)
		add="mkdir -p $2; cd $2;"
		;;
	useprefix)
		add="cd $2;"
		;;
	gitclone)
		add="git clone https://github.com/$author/dotfiles .;"
		;;
	gitupdate)
		add='git fetch && git reset --hard origin/master;'
		;;
	ensureparentdirs)
		add="mkdir -p $2; rmdir $2;"
		;;
	mv)
		add="mv $2 $3;"
		;;
	echoconfig)
		add='echo -e "'$2'" >> '$3';'
		;;
	runinstaller)
		add="./install-profile $2;"
		;;
	wslumaskfix)
		add=". ./wsl-umask-fix.sh;"
		;;
	osxcmdinstall)
		add="cd ~/ && curl -O https://raw.githubusercontent.com/nobitagamer/dotfiles/master/osx-install-xcode-command-line.sh && . ./osx-install-xcode-command-line.sh;"
		;;
	gitsetname)
		if (($3)); then
			global=' --global '
		else
			global=' '
		fi
		add='git config'$global'user.name "'$2'";'
		;;
	gitsetemail)
		if (($3)); then
			global=' --global '
		else
			global=' '
		fi
		add='git config'$global'user.email "'$2'";'
		;;
	gitinit)
		add='git init;'
		;;
	gitaddsub)
		add='git submodule add https://github.com/anishathalye/dotbot;'
		;;
	gitinstallinstall)
		add='cp dotbot/tools/git-submodule/install .;'
		;;
	gitinitialcommit)
		add='git add -A; git commit -m "Initial commit";'
		;;
	esac

  if [ -z "$setupshell" ]; then
    setupshell="    $add"
  else
    setupshell="$setupshell     $add"
  fi
}

# See https://stackoverflow.com/questions/4023830/how-to-compare-two-strings-in-dot-separated-version-format-in-bash
# 0) op='=';;
# 1) op='>';;
# 2) op='<';;
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if ((10#${ver1[i]:=0} > 10#${ver2[i]:=0}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

request_sudo()
{
  # Ask for the administrator password upfront
  echoerr blue "To easy accepting licenses and setup system software, you MUST enter sudo password to continue!"
  sudo sudo -v

  # Keep-alive: update existing `sudo` time stamp until `.macos` has finished
  while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &
}

centos_update_git()
{
    updatecmd='sudo yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm; sudo yum check-update; sudo yum -y --enablerepo="endpoint" install git'
    echoerr darkcyan  "Auto run Git package update command (see https://serverfault.com/questions/709433/install-a-newer-version-of-git-on-centos-7):"
    echoerr blue      "  $updatecmd"
    eval $updatecmd
}

testmode=0
verboseconf=0
preview=1
colors=1
installprofile=''

while [ $# -ne 0 ]; do
	case "$1" in
	test)
		testmode=1
		echoerr darkcyan "Test mode enabled."
		;;
	no-test)
		testmode=0
		echoerr darkcyan "Test mode disabled."
		;;
	verbose-config)
		verboseconf=1
		echoerr darkcyan "Verbose configuration file active."
		;;
	no-verbose-config)
		verboseconf=0
		echoerr darkcyan "Concise configuration file active."
		;;
	preview)
		preview=1
		echoerr darkcyan "Will show commands to be executed."
		;;
	no-preview)
		preview=0
		echoerr darkcyan "Will not show commands to be executed."
		;;
	colors)
		colors=1
		echoerr darkcyan "Will print with colors."
		;;
	no-colors)
		colors=0
		echoerr darkcyan "No color."
		;;
	*)
		installprofile=$installprofile' '$2
		# echoerr red "Unfamiliar configuration option"
		;;
	esac
	shift
done

setupshell=''
installerrun=1

if [ "$(umask)" = "0000" ]; then
  echoerr red 'I detected that you are running WSL and current umask value'
  echoerr red 'is NOT configured to 022, this may cause permission problems!'
  echoerr red 'To continue the following changes must be apply:'
  echoerr red '- Append `umask 022` to your ~/.bashrc file.'
  read -p "Do you want to apply? (Y/n) " answer
	if [ -z "$answer" ]; then
		answer="y"
	fi

  case "$answer" in
  Y* | y*)
    echoerr green "Fixes will be applied."
    setupshell='umask 022;'
    appendshell wslumaskfix
    ;;
  *)
    echoerr red "CANCELED, may be another time!"
    exit 1
    ;;
  esac
fi

echoerr
echoerr blue "Welcome to $author's dotfiles installer powered by Dotbot"
echoerr
echoerr darkred "Please be aware that installer may overwrite existing files in your home directory."
echoerr
echoerr blue "At any time, press ^C to quit. No changes will be made until you confirm."
echoerr

# ----------------------------------
# Try to detect platform
# ----------------------------------
platform='unknown'
unamestr=$(uname)

case $unamestr in
'Linux')
  # Detect CentOS distro
  if [ -f /etc/redhat-release ]; then
    platform='centos'
    osver=$(. /etc/os-release; echo ${VERSION_ID:0:1})
    if [ -f /etc/centos-release ] || [ -f /etc/rocky-release ] || [ -f /etc/almalinux-release ]; then
      platform="$platform centos$osver"
    fi

    # Treat CentOS Stream 8/9+ as Rocky Linux (use `dnf`)
    if [ -f /etc/rocky-release ] || [ -f /etc/almalinux-release ] || [ "$osver" -ge "8" ]; then
      platform="$platform rocky"
    fi
  else
    platform='linux'
  fi

  if grep -q Microsoft /proc/version || grep -q WSL2 /proc/version; then
    platform="$platform wsl"
  fi
	;;
'Darwin')
	platform='macos'
	;;
MINGW*)
	platform='windows'
	;;
CYGWIN*)
	platform='windows'
	;;
'FreeBSD')
	# platform='freebsd'
	;;
'SunOS')
	# platform='solaris'
	;;
'AIX') ;;
*) ;;
esac

echoerr green "Detected platform: $platform"

request_sudo

$(which git >&/dev/null)

if [ $? -ne 0 ]; then
  if [[ $platform == *"centos"* ]]; then
    echoerr red       "Detected $(cat /etc/centos-release)but Git (required by Homebrew) was not found!"
    centos_update_git
  else
    # !TODO: Not support yet.
    echoerr red "Git not found! Confirm it is indeed installed and reachable."
    exit
  fi
fi

if [[ $platform == *"centos"* ]]; then
  # Require Git's version >=2.7.0
  gitver=$(git --version | sed -ne 's/[^0-9]*\(\([0-9]\.\)\{0,4\}[0-9][^.]*\)/\1/p')
  vercomp $gitver 2.7.0
  if [ $? -eq 2 ]; then
    echoerr red       "Detected $(cat /etc/centos-release)but Git version is $gitver < 2.7.0 required by Homebrew!"
    centos_update_git
  fi

  # Require cURL's version >=7.41.0
  curlver=$(curl --version | head -n 1 | awk '{ print $2 }')
  vercomp $curlver 7.41.0
  if [ $? -eq 2 ]; then
    updatecmd='sudo yum -y install http://www.city-fan.org/ftp/contrib/yum-repo/city-fan.org-release-3-15.rhel7.noarch.rpm; sudo yum check-update; sudo yum -y install epel-release; sudo yum -y --enablerepo="epel,city-fan.org" install curl'
    echoerr red       "Detected $(cat /etc/centos-release)but CURL version is $curlver < 7.41.0 required by Homebrew!"
    echoerr darkcyan  "Auto run cURL package update command (see https://serverfault.com/questions/321321/upgrade-curl-to-latest-on-centos):"
    echoerr blue      "  $updatecmd"
    eval $updatecmd
  fi
fi

appendshell start
appendshell enablepasswordless
if [[ $platform == *"macos"* ]]; then
  appendshell osxcmdinstall
fi
if [[ $platform == *"centos"* ]]; then
  appendshell centosfixeol
  if [[ $platform == *"wsl"* ]] && [[ $platform != *"centos7"* ]]; then
    appendshell streamwsl
  fi
  if [[ $platform == *"wsl"* ]] && [[ $platform == *"centos9"* ]]; then
    appendshell stream9wsl
  fi
fi
if [[ $platform == *"wsl"* ]] && [[ $platform == *"centos"* ]]; then
  appendshell centoswsl
fi

prefix="~/.dotfiles"
prefixfull="${prefix/\~/${HOME}}"

if ! [ -d $prefixfull ]; then
	echoerr darkcyan "${prefix} is not in use."
	appendshell mkprefix $prefix
  appendshell gitclone
else
	echoerr darkcyan "${prefix} exists, i will try to update."
	appendshell useprefix $prefix
	appendshell gitupdate
fi

getgitinfo=0
gitinfoglobal=0
if (($installerrun)); then
	$(git config user.name >&/dev/null && git config user.email >&/dev/null)

	if [ $? -ne 0 ]; then
		echoerr darkred "Please note you do not have a name or email set for git."
		echoerr darkred "I shall not be able to commit unless you set the missing variables."
		while [ 1 ]; do
			read -p "Do you want to set them? (Y/n) " answer
			if [ -z "$answer" ]; then
				answer='y'
			fi
			case "$answer" in
			Y* | y*)
				getgitinfo=1
				while [ 1 ]; do
					read -p "Do you want these settings to be global? (Y/n) " answer
					if [ -z "$answer" ]; then
						answer='y'
					fi
					case "$answer" in
					Y* | y*)
						echoerr green "Adding --global to the set commands."
						gitinfoglobal=1
						break
						;;
					N* | n*)
						echoerr green "Okay, I shall make them local."
						gitinfoglobal=0
						break
						;;
					*)
						echoerr red "Answer not understood: ${answer}"
						;;
					esac
				done
				break
				;;
			N* | n*)
				echoerr darkgreen "Okay, I shall not."
				getgitinfo=0
				installerrun=0
				break
				;;
			*)
				echoerr red "Answer not understood: ${answer}"
				;;
			esac
		done
	fi
fi
if (($getgitinfo)); then
	$(git config user.name >&/dev/null)
	if [ $? -ne 0 ]; then
		gitname="Nguyen Khac Trieu"
	else
		gitname="$(git config user.name)"
	fi
	$(git config user.email >&/dev/null)
	if [ $? -ne 0 ]; then
		gitemail="trieunk@yahoo.com"
	else
		gitemail="$(git config user.email)"
	fi
	read -p "What do you want for your git name? [${gitname}] " answer
	if [ -z "$answer" ]; then
		answer="$gitname"
	fi
	gitname="$answer"
	read -p "What do you want for your git email? [${gitemail}] " answer
	if [ -z "$answer" ]; then
		answer="$gitemail"
	fi
	gitemail="$answer"
	appendshell gitsetname "$gitname" $gitinfoglobal
	appendshell gitsetemail "$gitemail" $gitinfoglobal
fi

if [ -z "$installprofile" ]; then
  installprofile=$platform
else
  read -p "What profile do you want to run? (macos/linux/wsl.ubuntu/windows10) [${installprofile}] " answer
  if [ -z "$answer" ]; then
    answer="macos"
  fi
  installprofile="$answer"
fi

appendshell runinstaller "$installprofile"

# Set git information since it maybe ovewrite by install process.
if (($gitinfoglobal)); then
  appendshell gitsetname "$gitname" $gitinfoglobal
  appendshell gitsetemail "$gitemail" $gitinfoglobal
fi

if (($preview)); then
	printferr "\n${setupshell//; /;\\n}\n\n" # place newline after each command for printing
	warningmessage='If you do not see a problem with the above commands, press ENTER. '
else
	warningmessage=''
fi

echoerrcolor darkred
read -p "${warningmessage}This is your last chance to press ^C before actions are taken that should not be interrupted. "
echoerrnocolor

result=0
if ! (($testmode)); then
  request_sudo
	eval $setupshell
  result=$?
fi

if [ $result -eq 0 ]; then
  # echoerr green 'Install completed, Use the following command to reloading your current shell:'
  # shellcheck disable=SC2016
  # echoerr blue '    exec sudo -u $USER -i'

  echoerr green "Reloading current shell, see you soon..."
  # shellcheck disable=SC2093
  exec sudo -u "$USER" -i

  exit 0
else
  exit $result
fi

# shellcheck disable=SC2317
function runDots() {
	git clone --recursive https://github.com/nobitagamer/dotfiles .dotfiles
	cd ~/.dotfiles && . ./install-profile $@

	# Run sections based on command line arguments
	for ARG in "$@"; do
		if [ $ARG == "bootstrap" ] || [ $ARG == "all" ]; then
			echo ""
			echo "------------------------------"
			echo "Syncing the dev-setup repo to your local machine."
			echo "------------------------------"
			echo ""
			cd ~ && curl -L https://github.com/nobitagamer/dotfiles/tarball/master | tar -xzv --strip-components 1 --exclude={README.md,LICENSE}
		fi
		if [ $ARG == "osxprep" ] || [ $ARG == "all" ]; then
			# Run the osxprep.sh Script
			echo ""
			echo "------------------------------"
			echo "Updating OSX and installing Xcode command line tools"
			echo "------------------------------"
			echo ""
			./.osxprep.sh
		fi
		if [ $ARG == "brew" ] || [ $ARG == "all" ]; then
			# Run the brew.sh Script
			# For a full listing of installed formulae and apps, refer to
			# the commented brew.sh source file directly and tweak it to
			# suit your needs.
			echo ""
			echo "------------------------------"
			echo "Installing Homebrew along with some common formulae and apps."
			echo "This might awhile to complete, as some formulae need to be installed from source."
			echo "------------------------------"
			echo ""
			./.brew.sh
		fi
		if [ $ARG == "osx" ] || [ $ARG == "all" ]; then
			# Run the osx.sh Script
			# I strongly suggest you read through the commented osx.sh
			# source file and tweak any settings based on your personal
			# preferences. The script defaults are intended for you to
			# customize. For example, if you are not running an SSD you
			# might want to change some of the settings listed in the
			# SSD section.
			echo ""
			echo "------------------------------"
			echo "Setting sensible OSX defaults."
			echo "------------------------------"
			echo ""
			./.osx.sh
		fi
		if [ $ARG == "php" ] || [ $ARG == "all" ]; then
			# Run the php.sh Script
			echo "------------------------------"
			echo "Setting up php development environment."
			echo "------------------------------"
			echo ""
			./.php.sh
		fi
	done

	echo "------------------------------"
	echo "Completed running .dots, restart your computer to ensure all updates take effect"
	echo "------------------------------"
}

# read -p "This script may overwrite existing files in your home directory. Are you sure? (y/n) " -n 1;
# echo "";
# if [[ $REPLY =~ ^[Yy]$ ]]; then
#     runDots $@
# fi;

# unset runDots;
