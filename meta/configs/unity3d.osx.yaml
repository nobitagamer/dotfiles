- defaults:
    link:
      create: true
      relink: true
      force: true
- link:
    ~/.Unity3D: apps/Unity3D

- brew:
  - imagemagick
  - librsvg
  - pcre
  - rbenv
  - fastlane
  # See https://github.com/Homebrew/homebrew-core/issues/109379
  - temurin@8 # For sdkmanager (openjdk@8: The x86_64 architecture is required for this software)
  - openjdk@11 # For Unity 2022.3+

- shell++:
  - description: Create symlink to allow system Java wrappers to find JDK 11
    condition: 'true'
  - stderr: true
    command: |

      # brew link openjdk@11
      sudo ln -sfn /opt/homebrew/opt/openjdk@11/libexec/openjdk.jdk /Library/Java/JavaVirtualMachines/openjdk-11.jdk

      /usr/libexec/java_home -V
      export JAVA_HOME=$(/usr/libexec/java_home -v 11)
      java -version

- cask:
  # See https://www.yippeecode.com/topics/upgrade-to-openjdk-temurin-using-homebrew/
  # - homebrew/cask-versions/temurin8 # java8: it's gone from Homebrew, use OpenJDK instead (temurin8)
  - android-sdk
  - unity-hub

- shell++:
  - description: Install .NET Core runtime 2.1 required by GitVersion
    condition: 'true'
  - stderr: true
    command: |
      cat <<- EOF > ~/install-dotnet-2.1.sh
      #!/bin/bash

      curl -sSL https://dot.net/v1/dotnet-install.sh | sudo bash /dev/stdin --install-dir /usr/local/share/dotnet --channel 2.1 --runtime aspnetcore
      EOF

      chmod +x ~/install-dotnet-*
      ~/install-dotnet-2.1.sh

- shell++:
  - description: Install Unity3D versions using Unity Hub
    condition: 'true'
  - stderr: true
    command: |

      cat <<- "EOF" > ~/install-unity.sh
      #!/bin/bash

      if [ -z "$2" ]; then
        sudo ~/install-unity list -v
        echo "Usage: ./install-unity.sh <UNITY_VERSION> <UNITY_CHANGESET>"
        /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- --headless editors --all
        echo 'For a full list of modules, please visit https://docs.unity3d.com/hub/manual/HubCLI.html'
        exit -1
      fi

      UNITY_VERSION=$1
      UNITY_CHANGESET=$2

      echo "Installing Unity $UNITY_VERSION ($UNITY_CHANGESET) with modules: visualstudio, ios, android, android-sdk-ndk-tools, android-open-jdk"
      sudo /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- \
        --headless install \
        --architecture $(uname -m) \
        --version $UNITY_VERSION \
        --changeset $UNITY_CHANGESET \
        && sudo /Applications/Unity\ Hub.app/Contents/MacOS/Unity\ Hub -- \
          --headless install-modules --cm \
          --architecture $(uname -m) \
          -m ios \
          -m android -m android-sdk-ndk-tools -m android-open-jdk \
          -m visualstudio \
          --version $UNITY_VERSION
      EOF

      chmod +x ~/install-unity.sh

      # Usage: install-unity.sh <version> <changeset>
      ~/install-unity.sh 2022.3.20f1 61c2feb0970d # ORC, DT
      ~/install-unity.sh 2021.3.15f1 e8e88683f834 # DWW
      ~/install-unity.sh 2021.3.11f1 0a5ca18544bf # DT2, MZ, MAM, SZ/SZ2

- shell++:
  - description: Pre-install default version of Unity3D (Legacy)
    condition: 'true'
  - stderr: true
    command: |
      # See https://stackoverflow.com/questions/9132826/stop-developer-tools-access-needs-to-take-control-of-another-process-for-debugg
      sudo /usr/sbin/DevToolsSecurity --enable

      if [ ! -f ~/install-unity ]; then
        ~/.Unity3D/unity-init.sh
      fi

      sudo ~/install-unity list --installed

      # # NOTE: Use this script will make legal license invalid.
      # # ~/.Unity3D/unity-install.sh 2018.1 9f2
      # # ~/.Unity3D/unity-install.sh 2018.4 3f1

      # # ~/.Unity3D/unity-install.sh 2019.1 10f1
      # # ~/.Unity3D/unity-install.sh 2019.2 12f1

      # # Install Android dependencies to match Unity version
      # sudo ~/install-unity install -y -p Unity,iOS,Android 2021.3.11f1
      # sudo ~/install-unity install -y -p Unity,iOS,Android 2021.3.9f1

      # # Create scripts to quick update Unity3D to latest patch version.
      # # 2019.4
      # cat <<- EOF > ~/update-unity-2019.4.sh
      # #!/bin/bash

      # sudo ~/install-unity install --upgrade -y -p Unity,iOS,Android 2019.4
      # EOF

      # # # 2018.4
      # # cat <<- EOF > ~/update-unity-2018.4.sh
      # # #!/bin/bash

      # # sudo ~/install-unity install --upgrade -y -p Unity,iOS,Android 2018.4
      # # EOF

      # # 2021.3
      # cat <<- EOF > ~/update-unity-2021.3.sh
      # #!/bin/bash

      # sudo ~/install-unity install --upgrade -y -p Unity,iOS,Android 2021.3
      # EOF

      # chmod +x ~/update-unity-*

- shell++:
  - description: Install cocoapods for build iOS
    condition: 'true'
  - stderr: true
    command: |
      RUBY_VERSION=2.7.2
      if [ -f ~/.ruby-version ];then
        RUBY_VERSION=$(cat ~/.ruby-version)

        rm ~/.rbenv/version
        ln -s ~/.ruby-version ~/.rbenv/version
      fi

      # Install Ruby for fastlane
      eval "$(rbenv init -)"

      brew update
      # !NOTE: enable this if openssl error
      # brew reinstall openssl
      brew upgrade ruby-build rbenv

      echo N | rbenv install $RUBY_VERSION

      # Install bundle package manager
      rbenv rehash
      rbenv shell $RUBY_VERSION

      gem install activesupport -v 4.2.6

      # The last version of bundler (>= 0) to support your Ruby & RubyGems was 2.4.22
      # Latest bundler requires Ruby version >= 3.0.0.
      gem install bundler -v 2.4.22

      gem install bundle cocoapods fastlane
      rbenv rehash

      # pod --version
      # fastlane

      # Fix VSTS execute bash with --no-profile that will force rbenv use system Ruby.
      rbenv global $RUBY_VERSION

      pod env
      pod repo update

      # Rebuild native extensions
      sudo chown -R $USER:staff ~/.rbenv/gems/2.7.0/gems
      gem pristine --all

- shell++:
  - description: Pre-install Android SDKs
    condition: 'true'
  - stderr: true
    command: |
      touch ~/.android/repositories.cfg

      echo "Accept all licenses..."

      # Use Java 8 for sdkmanager
      export JAVA_HOME=$(/usr/libexec/java_home -v 1.8)
      export PATH=${JAVA_HOME}/bin:$PATH

      # yes | sdkmanager --licenses
      # Can NOT use yes pipe that will cause deadlock
      sdkmanager --licenses

      # mkdir -p /usr/local/share/android-ndk/

      # For Unity3D 2018.1.0f2
      # wget -qO- https://dl.google.com/android/repository/android-ndk-r13b-darwin-x86_64.zip | tar xz - -C /usr/local/share/android-ndk/

      # For Unity3D 2018.3+
      # wget -qO- https://dl.google.com/android/repository/android-ndk-r16b-darwin-x86_64.zip | tar xz - -C /usr/local/share/android-ndk/

      # macOS Catalina https://developer.android.com/studio/projects/install-ndk#specific-version
      # echo "Because the Catalina stronger verification, IL2CPP build will fail if NDK version is NOT install via the SDK Installer in Android Studio."
      # See https://forum.unity.com/threads/il2cppcore-dll-did-not-run-properly.738350/#post-5392932
      # echo y | sdkmanager --install "ndk;16.1.4479499"

      # Unity 2019.3 (use built-in dependencies)
      # echo y | sdkmanager --install "ndk;19.2.5345600"

      # Android SDK build tools
      # echo y | sdkmanager "tools" "platform-tools" "build-tools;28.0.3"
      # echo y | sdkmanager "tools" "platform-tools" "build-tools;30.0.2" # 11/13/2020 require build tools m29
      echo y | sdkmanager "tools" "platform-tools" "build-tools;33.0.0"

      echo y | sdkmanager "extras;android;m2repository"
      # echo y | sdkmanager "platforms;android-16" "sources;android-16"
      # echo y | sdkmanager "platforms;android-26" "sources;android-26"
      # echo y | sdkmanager "platforms;android-27" "sources;android-27"
      # echo y | sdkmanager "platforms;android-28" "sources;android-28"
      echo y | sdkmanager "platforms;android-29" "sources;android-29" # platforms;android-29 is required for build AndroidX by Unity
      echo y | sdkmanager "platforms;android-30" "sources;android-30"
      echo y | sdkmanager "platforms;android-31" "sources;android-31"
      echo y | sdkmanager "platforms;android-33" "sources;android-33"
