#!/usr/bin/env zsh
# vim: set ft=zsh:ts=2:sts=2:sw=2:
#
# Executes commands at login pre-zshrc.
# .zprofile is basically the same as .zlogin except that it's sourced directly
# before .zshrc is sourced instead of directly after it. According to the zsh
# documentation ".zprofile is meant as an alternative to `.zlogin' for ksh fans;
# the two are not intended to be used together, although this could certainly be done if desired."
#

# Fix Zsh not hitting ~/.profile: https://superuser.com/questions/187639/zsh-not-hitting-profile
[[ -e ~/.profile ]] && emulate sh -c 'source ~/.profile'

###############################################################################
# XGD, see https://github.com/mattmc3/zdotdir/blob/main/.zprofile
###############################################################################
# https://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
# https://wiki.archlinux.org/index.php/XDG_Base_Directory
# https://wiki.archlinux.org/index.php/XDG_user_directories

export ZDOTDIR=${ZDOTDIR:-$HOME/.config/zsh}

export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
[ -d $HOME/.xdg ] && export XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-$HOME/.xdg}

if [[ "$OSTYPE" == darwin* ]]; then
  export XDG_DESKTOP_DIR=${XDG_DESKTOP_DIR:-$HOME/Desktop}
  export XDG_DOCUMENTS_DIR=${XDG_DOCUMENTS_DIR:-$HOME/Documents}
  export XDG_DOWNLOAD_DIR=${XDG_DOWNLOAD_DIR:-$HOME/Downloads}
  export XDG_MUSIC_DIR=${XDG_MUSIC_DIR:-$HOME/Music}
  export XDG_PICTURES_DIR=${XDG_PICTURES_DIR:-$HOME/Pictures}
  export XDG_VIDEOS_DIR=${XDG_VIDEOS_DIR:-$HOME/Videos}
  export XDG_PROJECTS_DIR=${XDG_PROJECTS_DIR:-$HOME/Projects}
fi

###############################################################################
# Startup
###############################################################################
# function {
#   while read -r line; do
#     if [[ ! $line == '#'* ]]; then            # ignore lines starting with an `#`
#       if (( ${#line} > 0 )); then             # ignore empty lines
#         line=${line%%\#*}
#         line=${line%%+([[:space:]])}          # remove trailing whitespace characters
#         systemctl --user set-environment $line
#       fi
#     fi
#   done < $HOME/.systemd-profile
# }
export UNAME=${$(uname -s):l}
export TEXMFHOME=texmf # Latex
export KEYTIMEOUT=1 # Reduce command line vim delay

# shortcut to this dotfiles path is $DOTFILES
export DOTFILES="$HOME/.dotfiles"

# your project folder that we can `c [tab]` to
export PROJECTS="$HOME/Code"

export WORKON_HOME=$HOME/.pyvirtualenvs # Virtualenv

###############################################################################
# Editors
###############################################################################
if [ -z "$SSH_CONNECTION" ]; then
  export EMACSCLIENT=emacsclient
  export EDITOR="$EMACSCLIENT -t -a 'vim'"
  export ALTERNATE_EDITOR=""
else
  export EDITOR=$(type emacs || type vim || type vi)

  # macOS only
  if [[ "$OSTYPE" == darwin* ]]; then
    if (( $+commands[code] )); then
      # your default editor
      export EDITOR='code'
    fi
  else
    if (( $+commands[nvim] )); then
      if (( $+commands[nvim-client] )); then
        export EDITOR='nvim-client'
      else
        export EDITOR='nvim'
      fi
    fi
  fi

fi
export VISUAL=$EDITOR
export PAGER='less'

###############################################################################
# Browser
###############################################################################
if [[ "$OSTYPE" == darwin* ]]; then
  export BROWSER='open'
fi

###############################################################################
# Language
###############################################################################
export TZ="Asia/Ho_Chi_Minh"

if [[ -z "$LANG" ]]; then
  export LANG='en_US.UTF-8'
fi

if [[ -z "$LANGUAGE" ]]; then
  export LANGUAGE='en_US.UTF-8'
fi

if [[ -z "$LC_ALL" ]]; then
  export LC_ALL=en_US.UTF-8
fi

###############################################################################
# Less
###############################################################################
# Set the default Less options.
# Mouse-wheel scrolling has been disabled by -X (disable screen clearing).
# Remove -X and -F (exit if the content fits on one screen) to enable it.
export LESS='-g -i -M -R -S -w -z-4'

# Improve Less input preprocessor
if (( $+commands[source-highlight] )); then
  export LESSOPEN='| /usr/bin/env source-highlight-esc.sh %s 2>&-'
fi

# Set the Less input preprocessor.
# Try both `lesspipe` and `lesspipe.sh` as either might exist on a system.
if (( $#commands[(i)lesspipe(|.sh)] )); then
  export LESSOPEN="| /usr/bin/env $commands[(i)lesspipe(|.sh)] %s 2>&-"
fi

###############################################################################
# Paths
# Set the list of directories that Zsh searches for programs.
###############################################################################
# Ensure path arrays do not contain duplicates.
typeset -gU cdpath mailpath path

if [[ -d $HOME/bin ]]; then
  path=($HOME/bin $path)
fi

# I manage some binaries and scripts on my ~/.local/bin directory, so I add it first
if [[ -d $HOME/.local/bin ]]; then
  path=($HOME/.local/bin $path)
fi

if [[ -d /usr/local/opt/openssl/bin ]]; then
  path=(/usr/local/opt/openssl/bin $path)
fi

if [[ $UNAME == darwin ]]; then
  # used by Homebrew
  path=(/usr/local/sbin $path)
fi

############
# Linuxbrew
############
# test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
# test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
# !NOTE: MUST use default install path to allows the use of most binary packages (bottles)
# See https://docs.brew.sh/Homebrew-on-Linux
if [[ -d /home/linuxbrew/.linuxbrew/bin ]]; then
  debug_echo "Loading linuxbrew..."
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  BREW_PREFIX=$(brew --prefix)
  export MANPATH="$BREW_PREFIX/share/man:$MANPATH"
  export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"

  ## Obsoleted, see https://www.rubyonmac.dev/openssl-1-1-deprecated-how-this-affects-your-ruby-projects
  # See https://stackoverflow.com/questions/77874851/trouble-installing-specific-version-of-ruby-openssl-issue
  # OPENSSL_PREFIX=$(brew --prefix openssl@1.1)
  # export CFLAGS="-I$OPENSSL_PREFIX/include"
  # export CPPFLAGS="-I$OPENSSL_PREFIX/include"
  # export LDFLAGS="-L$OPENSSL_PREFIX/lib"
fi

## Use Mise instead, see https://gist.github.com/AntonFriberg/e30c8bf64fbd07d3199369db551da5ad
# ############
# # Python
# ############
# # See https://github.com/sorin-ionescu/prezto/blob/master/modules/python/init.zsh
# # if [[ -d $HOME/.pyenv ]]; then
# #   export PYENV_SHIMS=$HOME/.pyenv/shims
# #   path=(
# #     $HOME/.pyenv/bin
# #     $PYENV_SHIMS
# #     $path)
# # fi

# # pip should only run if there is a virtualenv currently activated
# export PIP_REQUIRE_VIRTUALENV=false

# # Cache pip-installed packages to avoid re-downloading
# export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache

# # Python startup file
# export PYTHONSTARTUP=$HOME/.pythonrc

# # if [[ -d $HOME/lib/anaconda3 ]]; then
# #   path+=($HOME/lib/anaconda3/bin)
# # fi

# # Re-activate any active VIRTUAL_ENV on shell start up
# if [[ -n $VIRTUAL_ENV ]]; then
#   source ${VIRTUAL_ENV}/bin/activate
# fi

# # Re-activate any active anaconda env on shell start up
# if [[ -n $CONDA_DEFAULT_ENV ]]; then
#   echo "Sourcing conda env: $CONDA_DEFAULT_ENV"
#   source activate $CONDA_DEFAULT_ENV
# fi

# ############
# # Ruby
# ############
# # See https://github.com/sorin-ionescu/prezto/blob/master/modules/ruby/init.zsh
# # if [[ -d $HOME/.rbenv ]]; then
# #   export RBENV_SHIMS=$HOME/.rbenv/shims
# #   path=(
# #     $HOME/.rbenv/bin
# #     $RBENV_SHIMS
# #     $path)
# # fi

# # Make sure *vendored* gems are run first than anything (useful with rbenv)
# # See:
# #   + http://jimeh.me/blog/2011/11/01/my-ruby-development-environment/
# #   + http://ryan.mcgeary.org/2011/02/09/vendor-everything-still-applies/
# path=(
#   ./vendor/bundle/bin
#   $path
# )

# ############
# # Node.js
# ############
# if [[ -d $HOME/.nodenv ]]; then
#   debug_echo "Loading nodenv..."
#   export NODENV_SHIMS=$HOME/.nodenv/shims
#   path=(
#     $HOME/.nodenv/bin
#     $NODENV_SHIMS
#     $path)
# fi

# ############
# # Misc
# ############
# debug_echo "Loading misc..."
# if [[ -d $DOTFILES/bin ]]; then
#   path+=($DOTFILES/bin)
#   [[ -d $DOTFILES/bin/$UNAME ]] && path+=($DOTFILES/bin/$UNAME)
# fi

# if [[ -d $HOME/.fzf/bin ]]; then
#   path+=($HOME/.fzf/bin)
# fi

# if [[ -d $HOME/.tmuxifier/bin ]]; then
#   path+=($HOME/.tmuxifier/bin)
# fi

# ############
# # GoLang
# ############
# debug_echo "Loading golang..."
# export GOPATH=/usr/local/lib/golang
# export GOBIN=$GOPATH/bin

# if [[ -n $GOPATH ]]; then
#   path+=(/usr/local/opt/go/libexec/bin)
# fi

# # This must be last
# if [[ -d $GOBIN ]]; then
#   path=($path $GOBIN)
# fi

# # Set the the list of directories that cd searches.
# # cdpath=(
# #   $cdpath
# # )

export CHECKPOINT_DISABLE=1
export HOMEBREW_NO_ANALYTICS=1
export NO_UPDATE_NOTIFIER=1
export yeoman_test=1

export ZSH_HIGHLIGHT_HIGHLIGHTERS=(main brackets)

export PACKER_CACHE_DIR=$XDG_CACHE_HOME/packer
export PERU_CACHE_DIR=$XDG_CACHE_HOME/peru
export ZPLUG_CACHE_DIR=$XDG_CACHE_HOME/zplug

############
# fzf
############
# Ubuntu 16.04 only
# [ -f $XDG_CONFIG_HOME/fzf/fzf.bash ] && source $XDG_CONFIG_HOME/fzf/fzf.bash
# source <(fzf --zsh) # Loaded by zinit

############
# micro
############
# Enable True Color, see https://github.com/zyedidia/micro/blob/master/runtime/help/colors.md
export COLORTERM=truecolor
export MICRO_TRUECOLOR=1

###############################################################################
# Miscellaneous
###############################################################################
# ===== Good ol' GREP
GREP_COLOR='0;35'

# ===== History
# See https://github.com/sorin-ionescu/prezto/blob/master/modules/history/init.zsh
# Make some commands not show up in history.
HISTIGNORE="ls:cd:cd -:pwd:exit:date:* --help:ll:"

# ===== Misc
MANWIDTH=80 # make sure man pages doesn't overflow

export GREP_COLOR MANWIDTH

# ===== Dircolors (does not work on macOS, see https://github.com/seebi/dircolors-solarized/issues/10#issuecomment-2641754)
# https://github.com/seebi/dircolors-solarized
if [[ "$(tput colors)" == "256" ]] &&  [[ "$OSTYPE" != darwin* ]]; then
  [[ -d $XDG_CONFIG_HOME/plugins/dircolors-solarized ]] \
    && eval $(dircolors =(cat $XDG_CONFIG_HOME/plugins/dircolors-solarized/dircolors.256dark $XDG_CONFIG_HOME/plugins/dircolors.extra))
fi

# See https://superuser.com/questions/700637/terminator-and-zsh-ctrld-not-closing-session
# Disable Ctrl-d to logout
# bindkey -r '^D'
# setopt IGNORE_EOF

# export BSPWM_STATE=$TMPDIR/bspwm-state.json

# Disable macOS's "Save/Restore Shell State" feature for Zsh that initialized in /etc/zshrc_Apple_Terminal.
# See https://superuser.com/questions/1610587/disable-zsh-session-folder-completely
export SHELL_SESSIONS_DISABLE=1

# Make Zsh the default shell
[[ $SHELL =~ "zsh" ]] || export SHELL=`builtin which zsh`

[[ -o login ]] && echo "$(debug_timestamp)This ZSH Shell is a Login Shell" || echo "$(debug_timestamp)This ZSH Shell is Not a Login Shell"
