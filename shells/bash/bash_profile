#!/usr/bin/env bash
########################################
# This is the entrypoint of bash shell #
########################################
# See https://www.baeldung.com/linux/interactive-non-interactive-login-non-login-shells
# This file will execute FIRST when current shell is Login Shell (bash -l), SSH is an Interactive Login Shell.
# Search order, first-match will be executed: ~/.bash_profile -> ~/.bash_login -> ~/.profile

# unset DEBUG # Disable debug
# DEBUG=1 # Enable debug

source ~/.config/common/init_functions.sh

# Display message of the day
[ -d /etc/update-motd.d ] && run-parts /etc/update-motd.d 2>/dev/null

# This does NOT work on macOS, use [[ "$-" =~ 'i' ]] instead
# iatest=$(expr index "$-" i)
# !BUG: Do NOT output anything in non-interative shelll that cause rsync error: protocol incompatibility (code 2),
shopt -q login_shell && echo "$(debug_timestamp)This Bash Shell is a Login Shell" || debug_echo "This Bash Shell is NOT a Login Shell"

# XDG stuff
XDG_CACHE_HOME=$HOME/.cache
XDG_CONFIG_HOME=$HOME/.config
XDG_DATA_HOME=$HOME/.local/share

export XDG_CACHE_HOME XDG_CONFIG_HOME XDG_DATA_HOME

# Fix Package bash-completion was not found: https://github.com/Linuxbrew/legacy-linuxbrew/issues/46
export PKG_CONFIG_PATH=/usr/share/pkgconfig:$PKG_CONFIG_PATH

# Having your locale not set to a UTF-8 locale will cause issues with building and uploading your build.
# https://github.com/mobile-shell/mosh/issues/98
# might need locale-gen?
export LC_CTYPE="en_US.UTF-8"
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# !NOTE: move to shared profile later
############
# micro
############
# Enable True Color, see https://github.com/zyedidia/micro#features
export COLORTERM=truecolor
export MICRO_TRUECOLOR=1

# Init Linuxbrew, now is Homebrew
# test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
# test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
# !NOTE: MUST use default install path to allows the use of most binary packages (bottles)
# See https://docs.brew.sh/Homebrew-on-Linux
if [[ -d /home/linuxbrew/.linuxbrew/bin ]]; then
  debug_echo "Loading linuxbrew..."
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

  # BREW_PREFIX=$(brew --prefix)
  # export MANPATH="$BREW_PREFIX/share/man:$MANPATH"
  # export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"

  # OPENSSL_PREFIX=$(brew --prefix openssl@1.1)
  # export CFLAGS="-I$OPENSSL_PREFIX/include"
  # export CPPFLAGS="-I$OPENSSL_PREFIX/include"
  # export LDFLAGS="-L$OPENSSL_PREFIX/lib"
fi

# Ensure that a non-login shell has a defined environment.
[ -s "$HOME/.profile" ] && source "$HOME/.profile" && debug_echo "Loaded ~/.profile"

##############################################
# Use .localrc for SUPER SECRET CRAP that you
# don't want in your public, versioned repo.
##############################################
if ! [ -f "$HOME/.localrc" ]; then
  touch $HOME/.localrc

  # !MUST escape '$' and back-slash '\'
  cat >> ~/.localrc <<- EOL
#!/bin/sh
# This file execute after .bash_profile anf .bashrc, it only create on the first time dotfiles install
# Use it to persistent your shell customizations.

export VISUAL=nano
export EDITOR=nano

export HH_CONFIG=hicolor         # get more colors

# See https://designcise.com/web/tutorial/what-does-a-dash-in-front-of-a-shell-name-mean
# !NOTE: output \`-bash\` because it's a login shell
# echo Current shell: \$0
if [ -n "\$ZSH_VERSION" ]; then
  # assume Zsh
  echo zsh > /dev/null
elif [ -n "\$BASH_VERSION" ]; then
  # Bash only, bind not found on zsh
  # hstr --show-configuration >> ~/.localrc
  # REMOVED: Already set in sensible.bash
  # shopt -s histappend              # append new history items to .bash_history
  # export HISTCONTROL=ignorespace   # leading space hides commands from history
  # export HISTFILESIZE=10000        # increase history file size (default is 500)
  # export HISTSIZE=\${HISTFILESIZE}  # increase history size (default is 500)
  # export PROMPT_COMMAND="history -a; history -n; \${PROMPT_COMMAND}"   # mem/file sync
  # if this is interactive shell, then bind hh to Ctrl-r (for Vi mode check doc)
  hash hstr 2>/dev/null && if [[ \$- =~ .*i.* ]]; then bind '"\C-r": "\C-a hh \C-j"'; fi

  hash kompose 2>/dev/null \\
    && debug_echo "Loading completion: kopose..." \\
    && source <(kompose completion bash)
else
  # assume something else
  echo other> /dev/null
fi

# This make sure ble.sh don't blame script exited with non-zero code
true
EOL
fi

# Use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
debug_echo "Loading ~/.localrc ..."
[[ -f "$HOME/.localrc" ]] && source "$HOME/.localrc"

# Ensure that a login shell is also interactive.
# !CAUTION: when pipe command to ssh like `echo 'echo $-; shopt login_shell' | ssh localhost`,
# it will treat as Non-interactive Login Shell as Interactive Login Shell (load ~/.bashrc).
# See https://www.baeldung.com/linux/interactive-non-interactive-login-non-login-shells#non-interactive-login-shell
shopt -q login_shell && [ -n "$PS1" ] && [ -s "$HOME/.bashrc" ] && source "$HOME/.bashrc"
