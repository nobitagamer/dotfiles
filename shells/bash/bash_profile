#!/usr/bin/env bash
# This file will execute FIRST when current shell is Login Shell (bash -l), ssh default is NOT a Login Shell.
# Search order, first-match will be executed: ~/.bash_profile -> ~/.bash_login -> ~/.profile

source ~/.config/common/init_functions.sh

# unset DEBUG # Disable debug
# DEBUG=1 # Enable debug

# This does NOT work on macOS, use [[ "$-" =~ 'i' ]] instead
# iatest=$(expr index "$-" i)

shopt -q login_shell && echo "$(debug_timestamp)This Bash Shell is a Login Shell" || echo "$(debug_timestamp)This Bash Shell is NOT a Login Shell"

# Ensure that a non-login shell has a defined environment.
if [ -s "$HOME/.profile" ]; then
  source "$HOME/.profile"
fi

# # if running bash
# if [ -n "$BASH_VERSION" ]; then
#     # include .bashrc if it exists
#     if [ -f "$HOME/.bashrc" ]; then
# 	    . "$HOME/.bashrc"
#     fi
# fi

# XDG stuff
XDG_CACHE_HOME="$HOME"/.cache
XDG_CONFIG_HOME="$HOME"/.config
XDG_DATA_HOME="$HOME"/.local/share

export XDG_CACHE_HOME XDG_CONFIG_HOME XDG_DATA_HOME

BASHDOTDIR="${XDG_CONFIG_HOME:=$HOME/.config}/bash"

# Fix Package bash-completion was not found: https://github.com/Linuxbrew/legacy-linuxbrew/issues/46
export PKG_CONFIG_PATH=/usr/share/pkgconfig:$PKG_CONFIG_PATH

# *********************************
#   Load Bash-it                  *
# *********************************

# Path to the bash it configuration
export BASH_IT="$HOME/.bash_it"

# Lock and Load a custom theme file.
# Leave empty to disable theming.
# location /.bash_it/themes/
# You can easily preview the themes in your own shell using BASH_PREVIEW=true bash-it reload
#export BASH_IT_THEME='bobby'
export BASH_IT_THEME='sexy'

# (Advanced): Change this to the name of your remote repo if you
# cloned bash-it with a remote other than origin such as `bash-it`.
# export BASH_IT_REMOTE='bash-it'

# Your place for hosting Git repos. I use this for private repos.
export GIT_HOSTING='git@git.domain.com'

# Don't check mail when opening terminal.
unset MAILCHECK

# Change this to your console based IRC client of choice.
export IRC_CLIENT='irssi'

# Set this to the command you use for todo.txt-cli
export TODO="t"

# Set this to false to turn off version control status checking within the prompt for all themes
export SCM_CHECK=false

# Set SCM_GIT_SHOW_DETAILS to 'true' (the default value) to show the working copy details in your prompt.
export SCM_GIT_SHOW_DETAILS=false

# To speed up the prompt while still getting minimal git status information displayed such as the value of HEAD and whether there are any dirty objects
export SCM_GIT_SHOW_MINIMAL_INFO=true

# Bash-it uses git status to gather the repo information it shows in the prompt, so in some circumstances, it can be useful to instruct Bash-it to ignore these files
export SCM_GIT_IGNORE_UNTRACKED=true

# Set Xterm/screen/Tmux title with only a short hostname.
# Uncomment this (or set SHORT_HOSTNAME to something else),
# Will otherwise fall back on $HOSTNAME.
#export SHORT_HOSTNAME=$(hostname -s)

# Set Xterm/screen/Tmux title with only a short username.
# Uncomment this (or set SHORT_USER to something else),
# Will otherwise fall back on $USER.
#export SHORT_USER=${USER:0:8}

# Set Xterm/screen/Tmux title with shortened command and directory.
# Uncomment this to set.
#export SHORT_TERM_LINE=true

# Set vcprompt executable path for scm advance info in prompt (demula theme)
# https://github.com/djl/vcprompt
#export VCPROMPT_EXECUTABLE=~/.vcprompt/bin/vcprompt

# (Advanced): Uncomment this to make Bash-it reload itself automatically
# after enabling or disabling aliases, plugins, and completions.
# export BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=1

# Uncomment this to make Bash-it create alias reload.
# export BASH_IT_RELOAD_LEGACY=1

# Load Bash It in Interactive shell only
if [[ "$-" =~ 'i' ]] && [ -f "$BASH_IT"/bash_it.sh ]; then
  debug_echo "Loading bash_it..."
  source "$BASH_IT"/bash_it.sh
fi

# *********************************
#   End Bash-it                  *
# *********************************

# standard output is a tty
# do interactive initialization
# if [ -t 1 ]; then
#   # Use sensible bash
#   if [ -f $BASHDOTDIR/sensible.bash ]; then
#     source $BASHDOTDIR/sensible.bash
#   fi
# fi
if [[ "$-" =~ 'i' ]]; then
  # Use sensible bash
  if [ -f "$BASHDOTDIR/sensible.bash" ]; then
    debug_echo "Loading sensible bash..."
    source "$BASHDOTDIR/sensible.bash"
  fi
fi

# Load the shell dotfiles, and then some:
# * ~/.path can be used to extend `$PATH`.
# * ~/.extra can be used for other settings you donâ€™t want to commit.
debug_echo "Loading dotfiles..."
for file in $BASHDOTDIR/.{path,bash_prompt,exports,functions,extra}; do
  [ -r "$file" ] && [ -f "$file" ] && source "$file";
done;
unset file;

# Add tab completion for many Bash commands
# if which brew > /dev/null && [ -f "$(brew --prefix)/share/bash-completion/bash_completion" ]; then
#     source "$(brew --prefix)/share/bash-completion/bash_completion";
# elif [ -f /etc/bash_completion ]; then
#     source /etc/bash_completion;
# fi;

# Enable tab completion for `g` by marking it as an alias for `git`
# if type _git &> /dev/null && [ -f /usr/local/etc/bash_completion.d/git-completion.bash ]; then
#     complete -o default -o nospace -F _git g;
# fi;

# Add `killall` tab completion for common apps
complete -o "nospace" -W "Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall;

# Symfony console commands auto completion
if [ -f ~/.composer/vendor/bin/symfony-autocomplete ]; then
  debug_echo "Loading completiom: symfony..."
  eval "$(symfony-autocomplete --aliases=c --aliases=surf --aliases=php-cs-fixer --aliases=typo3cms --aliases=typo3console)"
fi;

# set PATH so it includes user's private bin directories
PATH="$HOME/bin:$HOME/.local/bin:$PATH"

[ -r "$HOME/.smartcd_config" ] && ( [ -n $BASH_VERSION ] || [ -n $ZSH_VERSION ] ) && source ~/.smartcd_config

# Init Linuxbrew, now is Homebrew
# test -d ~/.linuxbrew && eval $(~/.linuxbrew/bin/brew shellenv)
# test -d /home/linuxbrew/.linuxbrew && eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)

if [[ -d $HOME/.linuxbrew/bin ]] || [[ -d /home/linuxbrew/.linuxbrew/bin ]]; then
  debug_echo "Loading linuxbrew..."
  if [[ -d $HOME/.linuxbrew/bin ]]; then
    eval $($HOME/.linuxbrew/bin/brew shellenv)
  elif [[ -d /home/linuxbrew/.linuxbrew/bin ]]; then
    eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
  fi

  BREW_PREFIX=$(brew --prefix)
  export MANPATH="$BREW_PREFIX/share/man:$MANPATH"
  export INFOPATH="$BREW_PREFIX/share/info:$INFOPATH"

  OPENSSL_PREFIX=$(brew --prefix openssl@1.1)
  export CFLAGS="-I$OPENSSL_PREFIX/include"
  export CPPFLAGS="-I$OPENSSL_PREFIX/include"
  export LDFLAGS="-L$OPENSSL_PREFIX/lib"
fi

# Init Pyenv
if [ -d "$HOME/.pyenv/plugins/pyenv-virtualenv" ]; then
  debug_echo "Loading pyenv..."
  export PATH="$HOME/.pyenv/bin:$PATH"
  eval "$(pyenv init -)"
  eval "$(pyenv virtualenv-init -)"
fi

# Init rbenv
if [ -d "$HOME/.rbenv" ]; then
  debug_echo "Loading rbenv..."
  export PATH="$HOME/.rbenv/shims:$HOME/.rbenv/bin:$PATH"
  eval "$(rbenv init -)"
fi

############
# Node.js
############
if [[ -d $HOME/.nodenv ]]; then
  debug_echo "Loading nodenv..."
  export NODENV_SHIMS=$HOME/.nodenv/shims
  export PATH="$HOME/.nodenv/bin:$NODENV_SHIMS:$PATH"

  eval "$(nodenv init -)"
fi

############
# ble.sh
############
if [[ -f ~/.local/share/blesh/ble.sh ]]; then
  debug_echo "Loading ble.sh..."
  # This lines at the top of .bashrc:
  [[ $- == *i* ]] && source ~/.local/share/blesh/ble.sh --noattach
fi

# Ensure that a login non-interactive shell has a defined environment.
shopt -q login_shell && ( [ ! -z "$PS1" ] && [ -s "$HOME/.bashrc" ] ) && source "$HOME/.bashrc"

if ! [ -f "$HOME/.localrc" ]; then
  touch $HOME/.localrc

  # !MUST escape '$' and back-slash '\'
  cat >> ~/.localrc <<- EOL
#!/bin/sh
# This file execute after .bash_profile anf .bashrc, it only create on the first time dotfiles install
# Use it to persistent your shell customizations.

export VISUAL=nano
export EDITOR=nano

export HH_CONFIG=hicolor         # get more colors

# See https://designcise.com/web/tutorial/what-does-a-dash-in-front-of-a-shell-name-mean
# !NOTE: output \`-bash\` because it's a login shell
# echo Current shell: \$0
if [ -n "\$ZSH_VERSION" ]; then
  # assume Zsh
  echo zsh > /dev/null
elif [ -n "\$BASH_VERSION" ]; then
  # Bash only, bind not found on zsh
  # hstr --show-configuration >> ~/.localrc
  # REMOVED: Already set in sensible.bash
  # shopt -s histappend              # append new history items to .bash_history
  # export HISTCONTROL=ignorespace   # leading space hides commands from history
  # export HISTFILESIZE=10000        # increase history file size (default is 500)
  # export HISTSIZE=\${HISTFILESIZE}  # increase history size (default is 500)
  # export PROMPT_COMMAND="history -a; history -n; \${PROMPT_COMMAND}"   # mem/file sync
  # if this is interactive shell, then bind hh to Ctrl-r (for Vi mode check doc)
  hash hstr 2>/dev/null && if [[ \$- =~ .*i.* ]]; then bind '"\C-r": "\C-a hh \C-j"'; fi

  hash kompose 2>/dev/null \\
    && debug_echo "Loading completion: kopose..." \\
    && source <(kompose completion bash)
else
  # assume something else
  echo other> /dev/null
fi

# This make sure ble.sh don't blame script exited with non-zero code
true
EOL
fi

# Use .localrc for SUPER SECRET CRAP that you don't
# want in your public, versioned repo.
debug_echo "Loading local profile..."
[ -f "$HOME/.localrc" ] && source "$HOME/.localrc"

############
# starship
############
# Load after .localrc so KUBE_CONTEXT will available
hash starship 2>/dev/null && (debug_echo "Loading starship..." && eval "$(starship init bash)")

# ! This line MUST at the end of .bashrc:
[[ ${BLE_VERSION-} ]] && ble-attach
